{"ast":null,"code":"var _jsxFileName = \"/Users/ufengch/Desktop/Projects/homematcher/src/Components/CommentBox/CommentBox.js\";\nimport React, { useState } from \"react\";\nimport { FormControl, TextField, FormHelperText, Button, Grid, Paper, Avatar, Divider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\"; // class Comment extends React.Component {\n//   render() {\n//     const commentStyle = {\n//       content: {\n//         textAlign: \"left\",\n//       },\n//       time: {\n//         color: \"grey\",\n//         textAlign: \"left\",\n//       },\n//       divider: {\n//         margin: \"20px\",\n//       },\n//     };\n//     return (\n//       <div>\n//         <Grid container wrap=\"nowrap\" spacing={2}>\n//           <Grid item>\n//             <Avatar alt={this.props.author} src=\"\" />\n//           </Grid>\n//           <Grid justifyContent=\"left\" item xs zeroMinWidth>\n//             <h4>{this.props.author}</h4>\n//             <p style={commentStyle.content}>{this.props.content}</p>\n//           </Grid>\n//         </Grid>\n//         <Divider\n//           variant=\"fullWidth\"\n//           className=\"divider\"\n//           style={commentStyle.divider}\n//         />\n//       </div>\n//     );\n//   }\n// }\n//make Comment a functional component\n\nconst useStyles = makeStyles({\n  content: {\n    textAlign: \"left\"\n  },\n  time: {\n    color: \"grey\",\n    textAlign: \"left\"\n  },\n  divider: {\n    margin: \"20px\"\n  }\n});\n\nconst Comment = ({\n  author,\n  content\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66\n  },\n  __self: this\n}, React.createElement(Grid, {\n  container: true,\n  wrap: \"nowrap\",\n  spacing: 2,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67\n  },\n  __self: this\n}, React.createElement(Grid, {\n  justifyContent: \"left\",\n  item: true,\n  xs: true,\n  zeroMinWidth: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}, React.createElement(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69\n  },\n  __self: this\n}, author), React.createElement(\"p\", {\n  className: useStyles.content,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70\n  },\n  __self: this\n}, content))), React.createElement(Divider, {\n  variant: \"fullWidth\",\n  className: \"divider\",\n  className: useStyles.divider,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73\n  },\n  __self: this\n})); //create a useInput hook\n\n\nconst useInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: event => {\n        setValue(event.target.value);\n      }\n    }\n  };\n}; //make CommentForm a functional component\n\n\nconst CommentForm = () => {\n  const {\n    value: author,\n    bind: bindAuthor,\n    reset: resetAuthor\n  } = useInput('');\n  const {\n    value: content,\n    bind: bindContent,\n    reset: resetContent\n  } = useInput('');\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    this.addComment(author, content);\n    resetAuthor();\n    resetContent();\n  };\n\n  return React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    color: \"primary\",\n    fullWidth: \"true\",\n    className: \"ml-2 mr-2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(TextField, Object.assign({\n    id: \"outlined-basic\",\n    label: \"Name\",\n    variant: \"outlined\",\n    className: \"mb-2\"\n  }, bindAuthor, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })), React.createElement(TextField, Object.assign({\n    id: \"outlined-basic\",\n    label: \"Add a comment\",\n    variant: \"outlined\",\n    multiline: true,\n    rowsMax: 6,\n    rows: 4\n  }, bindContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })), React.createElement(FormHelperText, {\n    id: \"my-helper-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \" We'll never share your personal information. \"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \" SUBMIT\")));\n}; // class CommentForm extends React.Component {\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     let author = this._author;\n//     let content = this._content;\n//     this.props.addComment(author.value, content.value);\n//   }\n//   render() {\n//     return (\n//       <Grid container spacing={2}>\n//         <FormControl color=\"primary\" fullWidth=\"true\" className=\"ml-2 mr-2\">\n//           <TextField\n//             id=\"outlined-basic\"\n//             label=\"Name\"\n//             variant=\"outlined\"\n//             className=\"mb-2\"\n//             inputRef={(input) => (this._author = input)}\n//           />\n//           <TextField\n//             id=\"outlined-basic\"\n//             label=\"Add a comment\"\n//             variant=\"outlined\"\n//             multiline\n//             rowsMax={6}\n//             rows={4}\n//             inputRef={(textField) => (this._content = textField)}\n//           />\n//           <FormHelperText id=\"my-helper-text\">\n//             We'll never share your personal information.\n//           </FormHelperText>\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             type=\"submit\"\n//             onClick={this.handleSubmit.bind(this)}\n//           >\n//             SUBMIT\n//           </Button>\n//         </FormControl>\n//       </Grid>\n//     );\n//   }\n// }\n\n\nexport default class CommentBox extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      comments: [{\n        id: 1,\n        author: \"Fiona\",\n        content: \"A review is an evaluation of a publication, service, or company such as a movie, video game, musical composition, book; a piece of hardware like a car, home appliance, or computer; or an event or performance, such as a live music concert, play, musical theater show, dance show, or art exhibition.\"\n      }, {\n        id: 2,\n        author: \"Dan\",\n        content: \"A review is an evaluation of a publication, service, or company such as a movie, video game, musical composition, book; a piece of hardware like a car, home appliance, or computer; or an event or performance, such as a live music concert, play, musical theater show, dance show, or art exhibition.\"\n      }]\n    };\n  }\n\n  getComments() {\n    return this.state.comments.map(comment => {\n      return React.createElement(Comment, {\n        key: comment.id,\n        author: comment.author,\n        content: comment.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      });\n    });\n  }\n\n  addComment(author, content) {\n    const comment = {\n      id: this.state.comments.length + 1,\n      author: author,\n      content: content\n    };\n    this.setState({\n      comments: this.state.comments.concat([comment])\n    });\n  }\n\n  render() {\n    const commentListStyle = {\n      div: {\n        padding: \"14px\"\n      },\n      paper: {\n        padding: \"40px 20px\"\n      }\n    };\n    return React.createElement(\"div\", {\n      style: commentListStyle.div,\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Comments\"), React.createElement(CommentForm, {\n      addComment: this.addComment.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(Paper, {\n      style: commentListStyle.paper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, this.getComments()));\n  }\n\n}","map":{"version":3,"sources":["/Users/ufengch/Desktop/Projects/homematcher/src/Components/CommentBox/CommentBox.js"],"names":["React","useState","FormControl","TextField","FormHelperText","Button","Grid","Paper","Avatar","Divider","makeStyles","useStyles","content","textAlign","time","color","divider","margin","Comment","author","useInput","initialValue","value","setValue","reset","bind","onChange","event","target","CommentForm","bindAuthor","resetAuthor","bindContent","resetContent","handleSubmit","preventDefault","addComment","CommentBox","Component","constructor","state","comments","id","getComments","map","comment","length","setState","concat","render","commentListStyle","div","padding","paper"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {\n  FormControl,\n  TextField,\n  FormHelperText,\n  Button,\n  Grid,\n  Paper,\n  Avatar,\n  Divider,\n} from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n// class Comment extends React.Component {\n//   render() {\n//     const commentStyle = {\n//       content: {\n//         textAlign: \"left\",\n//       },\n//       time: {\n//         color: \"grey\",\n//         textAlign: \"left\",\n//       },\n//       divider: {\n//         margin: \"20px\",\n//       },\n//     };\n\n//     return (\n//       <div>\n//         <Grid container wrap=\"nowrap\" spacing={2}>\n//           <Grid item>\n//             <Avatar alt={this.props.author} src=\"\" />\n//           </Grid>\n//           <Grid justifyContent=\"left\" item xs zeroMinWidth>\n//             <h4>{this.props.author}</h4>\n//             <p style={commentStyle.content}>{this.props.content}</p>\n//           </Grid>\n//         </Grid>\n//         <Divider\n//           variant=\"fullWidth\"\n//           className=\"divider\"\n//           style={commentStyle.divider}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n//make Comment a functional component\nconst useStyles = makeStyles({\n  content: {\n        textAlign: \"left\",\n      },\n      time: {\n        color: \"grey\",\n        textAlign: \"left\",\n      },\n      divider: {\n        margin: \"20px\",\n      }\n});\n      \nconst Comment = ({ author, content }) => (\n  <div>\n    <Grid container wrap=\"nowrap\" spacing={2}>\n      <Grid justifyContent=\"left\" item xs zeroMinWidth>\n        <h4>{author}</h4>\n        <p className={useStyles.content}>{content}</p>\n      </Grid>\n    </Grid>\n    <Divider\n      variant=\"fullWidth\"\n      className=\"divider\"\n      className={useStyles.divider}\n    />\n  </div>\n);\n\n//create a useInput hook\nconst useInput = initialValue =>{\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: (event) => {\n        setValue(event.target.value);\n      },\n    },\n  };\n}\n\n//make CommentForm a functional component\nconst CommentForm = ()=>{\n\n  const { value:author, bind:bindAuthor, reset:resetAuthor } = useInput('');\n  const { value: content, bind: bindContent, reset: resetContent } = useInput('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    this.addComment(author, content);\n    resetAuthor();\n    resetContent();\n  }\n\n\n\n  return (\n    <Grid container spacing={2}>\n      <FormControl color=\"primary\" fullWidth=\"true\" className=\"ml-2 mr-2\">\n        <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" className=\"mb-2\" {...bindAuthor}/>\n        <TextField id=\"outlined-basic\" label=\"Add a comment\" variant=\"outlined\" multiline rowsMax={6} rows={4} {...bindContent}  />\n        <FormHelperText id=\"my-helper-text\"> We'll never share your personal information. </FormHelperText>\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\" onClick={handleSubmit}> SUBMIT</Button>\n      </FormControl>\n    </Grid>\n  );\n}\n\n// class CommentForm extends React.Component {\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     let author = this._author;\n//     let content = this._content;\n//     this.props.addComment(author.value, content.value);\n//   }\n\n//   render() {\n//     return (\n//       <Grid container spacing={2}>\n//         <FormControl color=\"primary\" fullWidth=\"true\" className=\"ml-2 mr-2\">\n//           <TextField\n//             id=\"outlined-basic\"\n//             label=\"Name\"\n//             variant=\"outlined\"\n//             className=\"mb-2\"\n//             inputRef={(input) => (this._author = input)}\n//           />\n//           <TextField\n//             id=\"outlined-basic\"\n//             label=\"Add a comment\"\n//             variant=\"outlined\"\n//             multiline\n//             rowsMax={6}\n//             rows={4}\n//             inputRef={(textField) => (this._content = textField)}\n//           />\n//           <FormHelperText id=\"my-helper-text\">\n//             We'll never share your personal information.\n//           </FormHelperText>\n//           <Button\n//             variant=\"contained\"\n//             color=\"primary\"\n//             type=\"submit\"\n//             onClick={this.handleSubmit.bind(this)}\n//           >\n//             SUBMIT\n//           </Button>\n//         </FormControl>\n//       </Grid>\n//     );\n//   }\n// }\n\nexport default class CommentBox extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      comments: [\n        {\n          id: 1,\n          author: \"Fiona\",\n          content:\n            \"A review is an evaluation of a publication, service, or company such as a movie, video game, musical composition, book; a piece of hardware like a car, home appliance, or computer; or an event or performance, such as a live music concert, play, musical theater show, dance show, or art exhibition.\",\n        },\n        {\n          id: 2,\n          author: \"Dan\",\n          content:\n            \"A review is an evaluation of a publication, service, or company such as a movie, video game, musical composition, book; a piece of hardware like a car, home appliance, or computer; or an event or performance, such as a live music concert, play, musical theater show, dance show, or art exhibition.\",\n        },\n      ],\n    };\n  }\n\n  getComments() {\n    return this.state.comments.map((comment) => {\n      return (\n        <Comment\n          key={comment.id}\n          author={comment.author}\n          content={comment.content}\n        />\n      );\n    });\n  }\n\n  addComment(author, content) {\n    const comment = {\n      id: this.state.comments.length + 1,\n      author: author,\n      content: content,\n    };\n    this.setState({\n      comments: this.state.comments.concat([comment]),\n    });\n  }\n\n  render() {\n    const commentListStyle = {\n      div: {\n        padding: \"14px\",\n      },\n      paper: {\n        padding: \"40px 20px\",\n      },\n    };\n    return (\n      <div style={commentListStyle.div} className=\"App\">\n        <h1>Comments</h1>\n        <CommentForm addComment={this.addComment.bind(this)} />\n        <Paper style={commentListStyle.paper}>{this.getComments()}</Paper>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}